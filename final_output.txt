Generated Code:
class MathUtils:
    @staticmethod
    def calculate_factorial(n):
        """Compute the factorial of a non-negative integer n."""
        if n < 0:
            raise ValueError("Factorial is not defined for negative numbers")
        if n in (0, 1):
            return 1
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

# Example of using the MathUtils class
try:
    result = MathUtils.calculate_factorial(5)
    print("The factorial of 5 is", result)
except ValueError as e:
    print(e)

Generated Tests:
import unittest
from math import factorial

class MathUtils:
    @staticmethod
    def calculate_factorial(n):
        """Compute the factorial of a non-negative integer n."""
        if n < 0:
            raise ValueError("Factorial is not defined for negative numbers")
        if n in (0, 1):
            return 1
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

class TestMathUtils(unittest.TestCase):
    def test_factorial_zero(self):
        """Test factorial of 0"""
        self.assertEqual(MathUtils.calculate_factorial(0), 1)

    def test_factorial_one(self):
        """Test factorial of 1"""
        self.assertEqual(MathUtils.calculate_factorial(1), 1)

    def test_factorial_small_number(self):
        """Test factorial of a small number"""
        self.assertEqual(MathUtils.calculate_factorial(5), 120)

    def test_factorial_large_number(self):
        """Test factorial of a larger number to see if function correctly calculates it"""
        expected_result = factorial(20)  # Using math.factorial as reference for correctness
        self.assertEqual(MathUtils.calculate_factorial(20), expected_result)
    
    def test_factorial_negative(self):
        """Test if ValueError is raised for negative inputs"""
        with self.assertRaises(ValueError):
            MathUtils.calculate_factorial(-1)

    def test_factorial_with_reference(self):
        """Test several factorial computations against the math.factorial function"""
        test_cases = [10, 15, 18]  # These cases can be expanded
        for n in test_cases:
            with self.subTest(n=n):
                expected_result = factorial(n)
                self.assertEqual(MathUtils.calculate_factorial(n), expected_result)

# Running the tests
if __name__ == '__main__':
    unittest.main(argv=[''], verbosity=2, exit=False)

Code Result:
Passed

Tests Result:
Passed